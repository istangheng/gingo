basePath: /
definitions:
  request.LoginRequest:
    properties:
      password:
        example: "123456"
        type: string
      telephone:
        example: "12345678910"
        type: string
    type: object
  request.RegisterRequest:
    properties:
      name:
        example: admin
        type: string
      password:
        example: "123456"
        type: string
      role:
        example: Normal
        type: string
      telephone:
        example: "12345678910"
        type: string
    type: object
  response.JSONResult:
    properties:
      code:
        type: integer
      data:
        type: object
      msg:
        type: string
    type: object
  response.UserResp:
    properties:
      name:
        type: string
      telephone:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server celler server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Gingo API
  version: "1.0"
paths:
  /api/auth/info:
    get:
      consumes:
      - application/json
      description: Info 获取用户信息
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 登陆成功
          schema:
            allOf:
            - $ref: '#/definitions/response.JSONResult'
            - properties:
                code:
                  type: integer
                data:
                  $ref: '#/definitions/response.UserResp'
                msg:
                  type: string
              type: object
      tags:
      - Admin
  /api/auth/login:
    post:
      consumes:
      - application/json
      description: Login 后台管理员登录
      parameters:
      - description: 管理员帐号登录
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/request.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 登陆成功
          schema:
            allOf:
            - $ref: '#/definitions/response.JSONResult'
            - properties:
                code:
                  type: integer
                data:
                  type: string
                msg:
                  type: string
              type: object
        "400":
          description: 参数错误
        "500":
          description: 系统异常
      tags:
      - Admin
  /api/auth/register:
    post:
      consumes:
      - application/json
      description: Register 用户注册
      parameters:
      - description: 帐号注册
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/request.RegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 注册成功
          schema:
            allOf:
            - $ref: '#/definitions/response.JSONResult'
            - properties:
                code:
                  type: integer
                data:
                  type: string
                msg:
                  type: string
              type: object
        "400":
          description: 参数错误
        "500":
          description: 系统异常
      tags:
      - Admin
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
  BasicAuth:
    type: basic
  OAuth2AccessCode:
    authorizationUrl: https://example.com/oauth/authorize
    flow: accessCode
    scopes:
      admin: ' Grants read and write access to administrative information'
    tokenUrl: https://example.com/oauth/token
    type: oauth2
  OAuth2Application:
    authorizationUrl: ""
    flow: application
    scopes:
      admin: ' Grants read and write access to administrative information'
      write: ' Grants write access'
    tokenUrl: https://example.com/oauth/token
    type: oauth2
  OAuth2Implicit:
    authorizationUrl: https://example.com/oauth/authorize
    flow: implicit
    scopes:
      admin: ' Grants read and write access to administrative information'
      write: ' Grants write access'
    type: oauth2
  OAuth2Password:
    authorizationUrl: ""
    flow: password
    scopes:
      admin: ' Grants read and write access to administrative information'
      read: ' Grants read access'
      write: ' Grants write access'
    tokenUrl: https://example.com/oauth/token
    type: oauth2
swagger: "2.0"
